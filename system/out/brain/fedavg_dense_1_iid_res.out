==================================================
Algorithm: FedAvg
Local batch size: 24
Local steps: 5
Local learing rate: 0.005
Total number of clients: 100
Clients join in each round: 0.1
Client drop rate: 0.0
Time select: False
Time threthold: 10000
Global rounds: 10
Running times: 1
Dataset: brain
Local model: dense121
Using device: cuda
Cuda device id: 0
==================================================

============= Running time: 0th =============
Creating server and clients ...
Traceback (most recent call last):
  File "main.py", line 388, in <module>
    run(args)
  File "main.py", line 150, in run
    args.model = torchvision.models.densenet121(pretrained=True, num_classes=args.num_classes).to(args.device)
  File "/home/undergrad/miniconda3/envs/fl_torch/lib/python3.8/site-packages/torchvision/models/densenet.py", line 267, in densenet121
    return _densenet('densenet121', 32, (6, 12, 24, 16), 64, pretrained, progress,
  File "/home/undergrad/miniconda3/envs/fl_torch/lib/python3.8/site-packages/torchvision/models/densenet.py", line 253, in _densenet
    _load_state_dict(model, model_urls[arch], progress)
  File "/home/undergrad/miniconda3/envs/fl_torch/lib/python3.8/site-packages/torchvision/models/densenet.py", line 239, in _load_state_dict
    model.load_state_dict(state_dict)
  File "/home/undergrad/miniconda3/envs/fl_torch/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1223, in load_state_dict
    raise RuntimeError('Error(s) in loading state_dict for {}:\n\t{}'.format(
RuntimeError: Error(s) in loading state_dict for DenseNet:
	size mismatch for classifier.weight: copying a param with shape torch.Size([1000, 1024]) from checkpoint, the shape in current model is torch.Size([5, 1024]).
	size mismatch for classifier.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
